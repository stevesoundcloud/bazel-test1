# To know which targets can be built in your project, Bazel inspects BUILD
# files. They are written in Bazel's build language which is syntactically
# similar to Python. Usually they are just a sequence of declarations of
# rules. Each rule specifies its inputs, outputs, and a way to compute the
# outputs from the inputs.
#
# The rule probably most familiar to people who have used Makefiles before
# (as it is the only rule available there) is the genrule, which specifies
# how the output can be generated by invoking a shell command.

genrule(
  name = "hello",
  outs = ["hello_world.txt"],
  cmd = "echo Hello World 2 > $@",
)

java_binary(
    name = "HelloJava",
    srcs = glob(["src/main/java/bazeltest1/*.java"]),
    deps = ["@com_google_guava_guava//jar"],
)

# useful: https://github.com/orrsella/bazel-example/blob/master/third_party/BUILD

load("@io_bazel_rules_scala//scala:scala.bzl", "scala_library", "scala_binary", "scala_test")

scala_binary(
    name = "HelloScala",
    srcs = glob(["src/main/scala/bazeltest1/*.scala"]),
    deps = ["@com_google_guava_guava//jar"],
    main_class = "bazeltest1.HelloScala"
)